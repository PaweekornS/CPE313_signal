%--- main.m: Play song with both hands concurrently

% Speed factor for durations
speed = 0.8;

keys_left = [0,...
             49, 51, 54, 54, ...
             0, ...
             54, 61, 63, 58, 56, 54, ...
             0, ...
             54, 54, ...
             0, ...
             58, 61, 63, 58, 56, 54, ...
             0, ...
             54, 54, 54, 58, 54, 51, 51, 51, 54, ... % start
             54, 54, 54, 58, 54, 51, 51, 51, 54, ...
             54, 54, 54, 58, 54, 51, 51, 51, 51, 54, ...
             54, 54, 58, 54, 51, 51, 51, 54, ...
             54, 54, 54, 58, 54, 51, 51, 51, 54, ...
             54, 54, 54, 59, 58, 54, 54, 54, 56, ...
             54, 54, 54, 59, 58, 54, 54, 54, 54, 56, ...
             54, 54, 59, 58, 54, 54, 54, 56, ...
             54, 54, 54, 54, 59, 58, 54, 54, 54, 56, ...
             54, 54, 54, 59, 58, 54, 54, 54, 56, ...
             54, 54, 54, 54, 59, 58, 54, 54, 54, 54, 51, 49, ...
             54, 54, 54, 54, 59, 58, 54, 54, 54, 56];
         
dur_left = speed * [4.4,...
                    0.4, 0.8, 0.8, 1.2, ...
                    3.2, ...
                    0.4, 0.8, 0.8, 0.6, 0.2, 0.8, ...
                    4, ...
                    0.8, 0.8, ...
                    3.6, ...
                    0.4, 0.8, 0.8, 0.8, 0.2, 1.2, ...
                    4.2, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ... % start
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.2, 0.2, 0.8, ...
                    0.4, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.2, 0.2, 0.8, ...
                    0.4, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.2, 0.2, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.2, 0.4, 0.8, ...
                    0.2, 0.2, 0.2, 0.2, 0.4, 0.4, 0.2, 0.2, 0.2, 0.2, 0.2, 0.6, ...
                    0.2, 0.2, 0.2, 0.2, 0.4, 0.4, 0.2, 0.2, 0.4, 0.6];

%--- Right-hand notes and durations
keys_right = [18, 30, 18, 30, ...
              18, 30, 18, 30, ...
              18, 30, 18, 30, ...
              18, 30, 18, 30, 23, 35, 23, 35, ...
              23, 35, 23, ...
              35, 20, 15,...
              32, 20, 32, 20, 32, ...
              20, 32, 23, 35, 23, 35, ...
              23, 35, 23, 35, 25, ...
              30, 42, 30, 18, 30, 42, 30, 32, 34, ... % start
              23, 35, 23, 11, 23, 35, 23, 25, 27, ...
              32, 44, 32, 20, 32, 44, 32, 34, 36, ...
              23, 35, 23, 11, 23, 35, 23, 39, 37, ...
              30, 42, 30, 18, 30, 42, 30, 32, 34, ...
              23, 35, 23, 11, 23, 35, 23, 25, 27];

dur_right = speed * [0.8, 0.4, 1.2, 0.8, ...
                     0.8, 0.4, 1.2, 0.8, ...
                     0.8, 0.4, 1.2, 0.8, ...
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.2, 0.8, ...
                     0.8, 0.4, 1.2, ...
                     0.8, 0.4, 0.4, ...
                     0.4, 1.2, 0.8, 0.8, 0.4, ...
                     1.2, 0.8, 0.8, 0.4, 1.2, 0.8, ...
                     0.8, 0.4, 1.2, 0.4, 0.4, ...
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2, ... % start
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2, ... 
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2, ... 
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2, ...
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2, ... 
                     0.8, 0.4, 1.2, 0.8, 0.8, 0.4, 1.6, 0.2, 0.2];

% --- main.m: Play song with both hands concurrently

% Speed factor for durations
%speed = 0.8;

% --- Define your own keys_left, dur_left, keys_right, dur_right here ---
% Example:
% keys_left = [...];
% dur_left = speed * [...];
% keys_right = [...];
% dur_right = speed * [...];

% Sampling frequency
fs = 8000;

% Compute total durations for each hand
total_time_left = sum(dur_left);
total_time_right = sum(dur_right);

% Determine total length of the signal
total_time = max(total_time_left, total_time_right);
N = round(total_time * fs) + 1;

% Preallocate signals for left and right hands
left_signal  = zeros(1, N);
right_signal = zeros(1, N);

%% --- Build the left-hand signal ---
current_index = 1;
for k = 1:length(keys_left)
    % Get current note duration and generate tone
    duration = dur_left(k);
    tone = note(keys_left(k), duration);
    num_samples = length(tone);

    % Check if it exceeds array size
    if current_index + num_samples - 1 > N
        num_samples = N - current_index + 1;
        warning('Index out of bounds for left_signal, truncating note.');
    end
    
    % Place the tone in the left-hand signal array
    left_signal(current_index:current_index+num_samples-1) = ...
        left_signal(current_index:current_index+num_samples-1) + tone(1:num_samples);

    % Advance the pointer
    current_index = current_index + num_samples;
end

%% --- Build the right-hand signal ---
current_index = 1;
for k = 1:length(keys_right)
    % Get current note duration and generate tone
    duration = dur_right(k);
    tone = note(keys_right(k), duration);
    num_samples = length(tone);

    % Check if it exceeds array size
    if current_index + num_samples - 1 > N
        num_samples = N - current_index + 1;
        warning('Index out of bounds for right_signal, truncating note.');
    end
    
    % Place the tone in the right-hand signal array
    right_signal(current_index:current_index+num_samples-1) = ...
        right_signal(current_index:current_index+num_samples-1) + tone(1:num_samples);

    % Advance the pointer
    current_index = current_index + num_samples;
end

%% --- Combine the two signals ---
% --- Volume control (adjust these values as needed) ---
volume_left = 0.2;  % Adjust volume for left hand (0.0 - 1.0)
volume_right = 0.5; % Adjust volume for right hand (0.0 - 1.0)

combined_signal = (volume_left * left_signal) + (volume_right * right_signal);

% --- Normalize to avoid clipping ---
combined_signal = combined_signal / max(abs(combined_signal));
% --- Play the combined signal ---
sound(combined_signal, fs);
